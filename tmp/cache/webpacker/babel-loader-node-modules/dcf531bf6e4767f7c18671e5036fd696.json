{"ast":null,"code":"import consumer from \"./consumer\";\nimport { popWindows, popChoise, popChoise2 } from '../popWindows/popWindows';\nvar subGuild;\nexport function subscGuild() {\n  var anagram = $('#anagram').html();\n\n  if (anagram) {\n    anagram = anagram.substring(1, anagram.length - 1);\n\n    if (subGuild) {\n      if (subGuild.identifier != '{\"channel\":\"GuildChannel\",\"guildanagram\":\"' + anagram + '\"}') {\n        subGuild.unsubscribe();\n        subGuild = subscribeguild(anagram);\n      }\n    } else subGuild = subscribeguild(anagram);\n  }\n}\n\nfunction subscribeguild(anagram) {\n  return consumer.subscriptions.create({\n    channel: \"GuildChannel\",\n    guildanagram: anagram\n  }, {\n    connected: function connected() {},\n    disconnected: function disconnected() {},\n    received: function received(data) {\n      if (data.addon) proposewar(data);\n      if (data.content) popWindows(data.content);\n\n      if (data.war) {\n        var newdata = data.data;\n        newdata[\"opponent\"] = $('#playerUsername').html();\n        newdata[\"challenger\"] = data.challenger;\n        newdata[\"authenticity_token\"] = document.getElementsByName('csrf-token')[0].content;\n        popChoise2(data.war, \"/guildwars/acceptmatch\", newdata);\n      }\n    }\n  });\n}\n\nfunction proposewar(data) {\n  var message;\n  if (data.addon === 'false') message = '<p>[' + data.guildname + '] declare war to your guild </p><p>betting ' + data.pointbet + ' point</p><p>number of unanwers match in guild war : ' + data.unanMatch + '</p><p>only duel count for war points</p>';else message = '<p>[' + data.guildname + '] declare war to your guild </p><p>betting ' + data.pointbet + ' point</p><p>number of unanwers match in guild war : ' + data.unanMatch + '</p><p>all match count for war points</p>';\n  popChoise2(message, \"guildwars/acceptwar\", data);\n}","map":{"version":3,"sources":["/pong_rails/app/javascript/channels/guild_channel.js"],"names":["consumer","popWindows","popChoise","popChoise2","subGuild","subscGuild","anagram","$","html","substring","length","identifier","unsubscribe","subscribeguild","subscriptions","create","channel","guildanagram","connected","disconnected","received","data","addon","proposewar","content","war","newdata","challenger","document","getElementsByName","message","guildname","pointbet","unanMatch"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAAQC,UAAR,EAAmBC,SAAnB,EAA8BC,UAA9B,QAA+C,0BAA/C;AAGA,IAAIC,QAAJ;AAEA,OAAO,SAASC,UAAT,GACP;AACE,MAAIC,OAAO,GAAGC,CAAC,CAAC,UAAD,CAAD,CAAcC,IAAd,EAAd;;AAEA,MAAGF,OAAH,EAAW;AACTA,IAAAA,OAAO,GAAGA,OAAO,CAACG,SAAR,CAAkB,CAAlB,EAAqBH,OAAO,CAACI,MAAR,GAAiB,CAAtC,CAAV;;AAEA,QAAGN,QAAH,EAAY;AACR,UAAIA,QAAQ,CAACO,UAAT,IAAuB,+CAA8CL,OAA9C,GAAwD,IAAnF,EAAwF;AACpFF,QAAAA,QAAQ,CAACQ,WAAT;AACAR,QAAAA,QAAQ,GAAGS,cAAc,CAACP,OAAD,CAAzB;AACH;AACJ,KALD,MAOAF,QAAQ,GAAGS,cAAc,CAACP,OAAD,CAAzB;AACD;AACF;;AAED,SAASO,cAAT,CAAwBP,OAAxB,EAAgC;AAExB,SAAON,QAAQ,CAACc,aAAT,CAAuBC,MAAvB,CAA8B;AAACC,IAAAA,OAAO,EAAE,cAAV;AAA0BC,IAAAA,YAAY,EAAEX;AAAxC,GAA9B,EAAgF;AACrFY,IAAAA,SADqF,uBACzE,CAAE,CADuE;AAErFC,IAAAA,YAFqF,0BAEtE,CACd,CAHoF;AAIrFC,IAAAA,QAJqF,oBAI5EC,IAJ4E,EAItE;AACb,UAAIA,IAAI,CAACC,KAAT,EACEC,UAAU,CAACF,IAAD,CAAV;AACF,UAAIA,IAAI,CAACG,OAAT,EACEvB,UAAU,CAACoB,IAAI,CAACG,OAAN,CAAV;;AACF,UAAIH,IAAI,CAACI,GAAT,EAAa;AAEX,YAAIC,OAAO,GAAGL,IAAI,CAACA,IAAnB;AAEAK,QAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBnB,CAAC,CAAC,iBAAD,CAAD,CAAqBC,IAArB,EAAtB;AACAkB,QAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBL,IAAI,CAACM,UAA7B;AACAD,QAAAA,OAAO,CAAC,oBAAD,CAAP,GAAgCE,QAAQ,CAACC,iBAAT,CAA2B,YAA3B,EAAyC,CAAzC,EAA4CL,OAA5E;AAEArB,QAAAA,UAAU,CAACkB,IAAI,CAACI,GAAN,EAAW,wBAAX,EAAqCC,OAArC,CAAV;AACD;AACF;AAnBoF,GAAhF,CAAP;AAqBP;;AAID,SAASH,UAAT,CAAoBF,IAApB,EAAyB;AAEvB,MAAIS,OAAJ;AAEA,MAAIT,IAAI,CAACC,KAAL,KAAe,OAAnB,EACEQ,OAAO,GAAG,SAAST,IAAI,CAACU,SAAd,GAA0B,6CAA1B,GAA0EV,IAAI,CAACW,QAA/E,GAA0F,uDAA1F,GACCX,IAAI,CAACY,SADN,GACkB,2CAD5B,CADF,KAIEH,OAAO,GAAG,SAAST,IAAI,CAACU,SAAd,GAA0B,6CAA1B,GAA0EV,IAAI,CAACW,QAA/E,GAA0F,uDAA1F,GACRX,IAAI,CAACY,SADG,GACS,2CADnB;AAEF9B,EAAAA,UAAU,CAAC2B,OAAD,EAAU,qBAAV,EAAiCT,IAAjC,CAAV;AACD","sourcesContent":["import consumer from \"./consumer\"\nimport {popWindows,popChoise, popChoise2} from '../popWindows/popWindows'\n\n\nvar subGuild;\n\nexport function subscGuild()\n{\n  var anagram = $('#anagram').html();\n  \n  if(anagram){\n    anagram = anagram.substring(1, anagram.length - 1)\n\n    if(subGuild){\n        if (subGuild.identifier != '{\"channel\":\"GuildChannel\",\"guildanagram\":\"'+ anagram + '\"}'){\n            subGuild.unsubscribe()\n            subGuild = subscribeguild(anagram)        \n        }\n    }\n    else\n    subGuild = subscribeguild(anagram)\n  }\n}\n\nfunction subscribeguild(anagram){\n\n        return consumer.subscriptions.create({channel: \"GuildChannel\", guildanagram: anagram}, {\n          connected() {},\n          disconnected() {\n          },\n          received(data) {        \n            if (data.addon)\n              proposewar(data);\n            if (data.content)\n              popWindows(data.content)\n            if (data.war){\n              \n              var newdata = data.data\n\n              newdata[\"opponent\"] = $('#playerUsername').html()\n              newdata[\"challenger\"] = data.challenger\n              newdata[\"authenticity_token\"] = document.getElementsByName('csrf-token')[0].content;\n\n              popChoise2(data.war, \"/guildwars/acceptmatch\", newdata)\n            }\n          }\n        });\n}\n\n\n\nfunction proposewar(data){\n  \n  let message \n\n  if (data.addon === 'false')\n    message = '<p>[' + data.guildname + '] declare war to your guild </p><p>betting ' + data.pointbet + ' point</p><p>number of unanwers match in guild war : '\n             + data.unanMatch + '</p><p>only duel count for war points</p>'; \n  else\n    message = '<p>[' + data.guildname + '] declare war to your guild </p><p>betting ' + data.pointbet + ' point</p><p>number of unanwers match in guild war : '\n    + data.unanMatch + '</p><p>all match count for war points</p>';\n  popChoise2(message, \"guildwars/acceptwar\", data);\n}"]},"metadata":{},"sourceType":"module"}