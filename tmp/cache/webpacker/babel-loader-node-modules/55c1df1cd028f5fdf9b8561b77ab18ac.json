{"ast":null,"code":"import { popWindows, popChoise } from '../popWindows/popWindows';\nvar format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\nvar GUILD = {};\nGUILD.Wars = Backbone.Model.extend({\n  url: function url() {\n    return \"guildwars/war\";\n  }\n});\nGUILD.wars = new GUILD.Wars();\nGUILD.ViewWars = Backbone.View.extend({\n  initialize: function initialize() {\n    this.template = _.template('<h2>Guild Wars （　ﾟДﾟ）</h2>' + '<ul>' + '<li> All wars last 5 min </li>' + '<li>War time start at the begin of the war ,but it only last for 2 min.</li>' + '<li>During war time any menber of your guild can propose a match with the other guild (only one pending propose by guild).</li>' + '<li>War Match are proposed to the other guild and can be accepted by any menber of the opposite guild.</li>' + '<li>Each Match win again the enemy guild give one point </li>' + '<li>If a Match propose is not accepted in 5 sec , it automatically won</li>' + '<li>You can choose the number of unanswered match during that war time, if you got to mush unanswered match' + 'the war time is over</li>' + '<li>You can set the number of point you bet.</li>' + '<li>If \"add-on\" is on, all match win public or tournament give one point to the guild war</li>' + '<h3>Winner is the guild with the more war point at the end , winner take all HF</h3> ' + '<p>Enemy guild\t\t\t\t<input type=\"string\" id=\"opponent\" placeholder=\"enemy guild\"/> <p/>' + '<p>Point bet\t\t\t\t\t<input type=\"string\" id=\"pointBet\" placeholder=\"number of point bet\"/> <p/>' + '<p>Number of unanswered match\t<input type=\"string\" id=\"unansweredMatch\" placeholder=\"number of unanswered match during war time\"/> <p/>' + '<p><input type=\"checkbox\" id=\"add-on\">add-on, all match count for war point </input><p/>' + '<button id=\"propose-wars\">Propose wars</button>');\n    this.render();\n  },\n  render: function render() {\n    this.$el.html(this.template());\n  }\n});\nGUILD.ViewProposeWars = Backbone.View.extend({\n  initialize: function initialize() {},\n  events: {\n    \"click #propose-wars\": \"proposeWars\"\n  },\n  proposeWars: function proposeWars() {\n    var opponent = $('#opponent').val();\n    var pointbet = $('#pointBet').val();\n    var unanMatch = $('#unansweredMatch').val();\n    var addon = $('#add-on').is(':checked');\n    if (!opponent || !pointbet || !unanMatch || isNaN(pointbet) || isNaN(unanMatch) || format.test(opponent)) popWindows('bad input');else if (pointbet > 100 || unanMatch > 100) popWindows('number input is to big !! ( that what she said ) limit is 100');else $.ajax({\n      type: \"POST\",\n      url: 'guildwars',\n      data: {\n        guildname: this.model.get('guildname'),\n        opponent: opponent,\n        pointbet: pointbet,\n        unanMatch: unanMatch,\n        addon: addon\n      },\n      headers: {\n        \"X-CSRF-Token\": global.CSRF()\n      },\n      success: function success(data) {\n        if (data.error) popWindows(data.content);else popWindows('Wars Invitation Send');\n      }\n    });\n  }\n}); //---------------------------------------------------------------------------------\n\nGUILD.ViewWarsGuild = Backbone.View.extend({\n  template: _.template('<h1> ----------- GUILD WAR -------- </h1>' + '<table><tr><th>⊂(◉‿◉)つ </th><th><%- guildname_1 %> </th><th>VS</th><th><%- guildname_2 %></th><th> ⊂(◉‿◉)つ</th><tr>' + '<tr><th/><th><%- point_1 %> </th><th>score</th><th><%- point_2 %></th><th/></tr></talbe>' + '<table><tr><th>Start :</th><th> <%- start %></th></tr> ' + '<tr><th>End : </th><th><%- end %></th></tr>' + '<tr><th>Addon : </th><th><%- addon %></th></tr>' + '<tr><th>Number of unanwered match autorised : </th><th><%- setunwanswered %></th></tr>' + '<tr><th>Point bet :</th><th><%- pointbet %> </th></tr></table>' + '<button id=\"proposeMatch\" value=\"<%- id %>\">propose a match</button>'),\n  model: GUILD.wars,\n  initialize: function initialize() {\n    GUILD.guild.on('sync', this.getAttribues, this);\n    this.model.on('sync', this.render, this);\n  },\n  getAttribues: function getAttribues() {\n    this.model.fetch({\n      data: $.param({\n        guildname: GUILD.guild.get('guildname')\n      })\n    });\n  },\n  render: function render() {\n    this.$el.html('Your guild currently don\\'t have any war');\n    if (this.model.get('start')) this.$el.html(this.template(this.model.attributes));\n  }\n});\nGUILD.ViewWarsMatch = Backbone.View.extend({\n  events: {\n    'click #proposeMatch': 'proposematch'\n  },\n  proposematch: function proposematch() {\n    var id = $('#proposeMatch').attr('value');\n    var username = $('#playerUsername').html();\n    $.ajax({\n      type: \"POST\",\n      url: 'guildwars/match',\n      data: {\n        war_id: id,\n        guild_id: GUILD.guild.get('id'),\n        challenger: username\n      },\n      headers: {\n        \"X-CSRF-Token\": global.CSRF()\n      },\n      success: function success(data) {\n        if (data.error) popWindows(data.content); // else\n        //  \tpopWindows('Wars Match Send')\n      }\n    });\n  }\n});\nexport function Guildwar(model) {\n  GUILD.guild = model;\n  $('#GuildWars').on(\"click\", function () {\n    GUILD.wars.fetch({\n      data: $.param({\n        guildname: GUILD.guild.get('guildname')\n      })\n    });\n  });\n  new GUILD.ViewWars({\n    el: $(\"#proposeWars\"),\n    model: model\n  });\n  new GUILD.ViewProposeWars({\n    el: $(\"#proposeWars\"),\n    model: model\n  });\n  new GUILD.ViewWarsGuild({\n    el: $('#guildWars')\n  });\n  new GUILD.ViewWarsMatch({\n    el: $('#guildWars')\n  });\n}","map":{"version":3,"sources":["/pong_rails/app/javascript/Guildwars/guildwars.js"],"names":["popWindows","popChoise","format","GUILD","Wars","Backbone","Model","extend","url","wars","ViewWars","View","initialize","template","_","render","$el","html","ViewProposeWars","events","proposeWars","opponent","$","val","pointbet","unanMatch","addon","is","isNaN","test","ajax","type","data","guildname","model","get","headers","global","CSRF","success","error","content","ViewWarsGuild","guild","on","getAttribues","fetch","param","attributes","ViewWarsMatch","proposematch","id","attr","username","war_id","guild_id","challenger","Guildwar","el"],"mappings":"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","sourcesContent":["import {popWindows,popChoise} from '../popWindows/popWindows'\n\nvar format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\nlet GUILD = {};\n\nGUILD.Wars = Backbone.Model.extend({\n\turl: function(){return \"guildwars/war\"}\n})\n\nGUILD.wars = new GUILD.Wars()\n\nGUILD.ViewWars = Backbone.View.extend({\n\tinitialize: function() {\n\t\tthis.template = _.template(\t'<h2>Guild Wars （　ﾟДﾟ）</h2>' +\n\t\t\t\t\t\t\t\t\t'<ul>' +\n\t\t\t\t\t\t\t\t\t'<li> All wars last 5 min </li>' + \n\t\t\t\t\t\t\t\t\t'<li>War time start at the begin of the war ,but it only last for 2 min.</li>'+\n\t\t\t\t\t\t\t\t\t'<li>During war time any menber of your guild can propose a match with the other guild (only one pending propose by guild).</li>'+\n\t\t\t\t\t\t\t\t\t'<li>War Match are proposed to the other guild and can be accepted by any menber of the opposite guild.</li>'+\n\t\t\t\t\t\t\t\t\t'<li>Each Match win again the enemy guild give one point </li>' +\n\t\t\t\t\t\t\t\t\t'<li>If a Match propose is not accepted in 5 sec , it automatically won</li>' +\n\t\t\t\t\t\t\t\t\t'<li>You can choose the number of unanswered match during that war time, if you got to mush unanswered match' +\n\t\t\t\t\t\t\t\t\t'the war time is over</li>' + \n\t\t\t\t\t\t\t\t\t'<li>You can set the number of point you bet.</li>' +\n\t\t\t\t\t\t\t\t\t'<li>If \"add-on\" is on, all match win public or tournament give one point to the guild war</li>' +\n\t\t\t\t\t\t\t\t\t'<h3>Winner is the guild with the more war point at the end , winner take all HF</h3> '+\n\t\t\t\t\t\t\t\t\t'<p>Enemy guild\t\t\t\t<input type=\"string\" id=\"opponent\" placeholder=\"enemy guild\"/> <p/>' +\n\t\t\t\t\t\t\t\t\t'<p>Point bet\t\t\t\t\t<input type=\"string\" id=\"pointBet\" placeholder=\"number of point bet\"/> <p/>'+\n\t\t\t\t\t\t\t\t\t'<p>Number of unanswered match\t<input type=\"string\" id=\"unansweredMatch\" placeholder=\"number of unanswered match during war time\"/> <p/>' +\n\t\t\t\t\t\t\t\t\t'<p><input type=\"checkbox\" id=\"add-on\">add-on, all match count for war point </input><p/>' +\n\t\t\t\t\t\t\t\t\t'<button id=\"propose-wars\">Propose wars</button>'\n\n\t\t);\n\t\tthis.render();\n\t},\n\trender: function() {\n\t\tthis.$el.html(this.template());\n\t},\n})\n\nGUILD.ViewProposeWars = Backbone.View.extend({\n\tinitialize: function() {\n\t},\n\tevents: {\n\t\t\"click #propose-wars\": \"proposeWars\"\n\t},\n\tproposeWars: function(){\n\t\tvar opponent = $('#opponent').val()\n\t\tvar pointbet = $('#pointBet').val()\n\t\tvar unanMatch = $('#unansweredMatch').val()\n\t\tvar addon = $('#add-on').is(':checked')\n\t\t\n\t\tif (!opponent || !pointbet || !unanMatch || isNaN(pointbet)|| isNaN(unanMatch)|| format.test(opponent))\n\t\t\tpopWindows('bad input')\n\t\telse if (pointbet > 100 || unanMatch > 100)\n\t\t\tpopWindows('number input is to big !! ( that what she said ) limit is 100')\n\t\telse\n\t\t\t$.ajax({\n\t\t\t\ttype: \"POST\",\n\t\t\t\turl: 'guildwars',\n\t\t\t\tdata: {\n\t\t\t\t\tguildname: this.model.get('guildname'),\n\t\t\t\t\topponent: opponent,\n\t\t\t\t\tpointbet: pointbet,\n\t\t\t\t\tunanMatch: unanMatch,\n\t\t\t\t\taddon: addon\n\t\t\t\t},\n\t\t\t\theaders: { \"X-CSRF-Token\": global.CSRF() },\n\t\t\t\tsuccess: function(data){\n\n\t\t\t\t\tif (data.error)\n\t\t\t\t\t \tpopWindows(data.content)\n\t\t\t\t\telse\n\t\t\t\t\t\tpopWindows('Wars Invitation Send')\n\t\t\t\t}\n            })\n\t},\n})\n\n//---------------------------------------------------------------------------------\n\nGUILD.ViewWarsGuild = Backbone.View.extend({\n\ttemplate: _.template(\t'<h1> ----------- GUILD WAR -------- </h1>' +\n\t\t\t\t\t\t\t'<table><tr><th>⊂(◉‿◉)つ </th><th><%- guildname_1 %> </th><th>VS</th><th><%- guildname_2 %></th><th> ⊂(◉‿◉)つ</th><tr>' +\n\t\t\t\t\t\t\t'<tr><th/><th><%- point_1 %> </th><th>score</th><th><%- point_2 %></th><th/></tr></talbe>' +\n\t\t\t\t\t\t\t'<table><tr><th>Start :</th><th> <%- start %></th></tr> '+\n\t\t\t\t\t\t\t'<tr><th>End : </th><th><%- end %></th></tr>' +\n\t\t\t\t\t\t\t'<tr><th>Addon : </th><th><%- addon %></th></tr>' +\n\t\t\t\t\t\t\t'<tr><th>Number of unanwered match autorised : </th><th><%- setunwanswered %></th></tr>' +\n\t\t\t\t\t\t\t'<tr><th>Point bet :</th><th><%- pointbet %> </th></tr></table>' +\n\t\t\t\t\t\t\t'<button id=\"proposeMatch\" value=\"<%- id %>\">propose a match</button>'\n\t\t\t\t\t\t),\n\tmodel: GUILD.wars,\n\tinitialize: function(){\n\t\tGUILD.guild.on('sync', this.getAttribues, this)\n\t\tthis.model.on('sync', this.render, this)\n\t},\n\tgetAttribues: function(){\n\t\tthis.model.fetch({data: $.param({guildname: GUILD.guild.get('guildname')})});\n\t},\n\trender: function(){\n\t\tthis.$el.html('Your guild currently don\\'t have any war')\n\t\tif(this.model.get('start'))\n\t\t\tthis.$el.html(this.template(this.model.attributes))\n\t},\n})\n\nGUILD.ViewWarsMatch = Backbone.View.extend({\n\tevents: {\n\t\t'click #proposeMatch' : 'proposematch' \n\t},\n\tproposematch: function(){\n\n\t\tvar id = $('#proposeMatch').attr('value')\n\t\tvar username = $('#playerUsername').html()\n\n\t\t$.ajax({\n\t\t\ttype: \"POST\",\n\t\t\turl: 'guildwars/match',\n\t\t\tdata: {\n\t\t\t\twar_id: id,\n\t\t\t\tguild_id: GUILD.guild.get('id'),\n\t\t\t\tchallenger: username\n\t\t\t},\n\t\t\theaders: { \"X-CSRF-Token\": global.CSRF() },\n\t\t\tsuccess: function(data){\n\t\t\t\tif (data.error)\n\t\t\t\t\t popWindows(data.content)\n\t\t\t\t// else\n\t\t\t\t//  \tpopWindows('Wars Match Send')\n\t\t\t}\n\t\t})\n\t}\n})\n\nexport function Guildwar(model){\n\n\tGUILD.guild = model\n\t\n\t$('#GuildWars').on(\"click\", function(){\n\t\tGUILD.wars.fetch({data: $.param({guildname: GUILD.guild.get('guildname')})})\n\t})\n\tnew GUILD.ViewWars({el: $(\"#proposeWars\"), model: model});\n\tnew GUILD.ViewProposeWars({el: $(\"#proposeWars\"), model: model});\n\tnew GUILD.ViewWarsGuild({el: $('#guildWars')})\n\tnew GUILD.ViewWarsMatch({el: $('#guildWars')})\n\n}\n"]},"metadata":{},"sourceType":"module"}